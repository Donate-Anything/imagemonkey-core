package tests

import (
	log "github.com/sirupsen/logrus"
	"flag"
	commons "github.com/bbernhard/imagemonkey-core/commons"
	"github.com/gomodule/redigo/redis"
)

var db *ImageMonkeyDatabase

const BASE_URL string = "http://127.0.0.1:8081/"
const API_VERSION string = "v1"
var UNVERIFIED_DONATIONS_DIR string = "../unverified_donations/"
var DONATIONS_DIR string = "../donations/"
var X_CLIENT_ID string
var X_CLIENT_SECRET string
var DB_PORT string = "5432"
var REDIS_ADDRESS string = ":6379"

var unverifiedDonationsDir = flag.String("unverified_donations_dir", "../unverified_donations/", "Path to unverified donations directory")
var donationsDir = flag.String("donations_dir", "../donations/", "Path to donations directory")


func setupInfrastructure() {
	UNVERIFIED_DONATIONS_DIR = *unverifiedDonationsDir
	DONATIONS_DIR = *donationsDir

	X_CLIENT_ID = commons.MustGetEnv("X_CLIENT_ID")
	X_CLIENT_SECRET = commons.MustGetEnv("X_CLIENT_SECRET")
	
	DB_PORT = commons.MustGetEnv("DB_PORT")

	redisAddress := commons.GetEnv("REDIS_ADDRESS")
	if redisAddress != "" {
		REDIS_ADDRESS = redisAddress
	}

	autogeneratedBaseLabelsPath := "../wordlists/en/includes/labels/autogenerated"
	autogeneratedLabelsPath := autogeneratedBaseLabelsPath + ".libsonnet"
	autogeneratedBaseMetaLabelsPath := "../wordlists/en/includes/metalabels/autogenerated"
	autogeneratedMetaLabelsPath := autogeneratedBaseMetaLabelsPath + ".libsonnet"

	log.Info("Merging labels into one file...")
	labelsDirectoryMerger := commons.NewLabelsDirectoryMerger(autogeneratedBaseLabelsPath, autogeneratedLabelsPath)
	err := labelsDirectoryMerger.Merge()
	if err != nil {
		log.Fatal("Couldn't merge labels into one file: ", err.Error())
	}
	
	log.Info("Merging metalabels into one file...")
	metaLabelsDirectoryMerger := commons.NewMetaLabelsDirectoryMerger(autogeneratedBaseMetaLabelsPath, autogeneratedMetaLabelsPath)
	err = metaLabelsDirectoryMerger.Merge()
	if err != nil {
		log.Fatal("Couldn't merge metalabels into one file: ", err.Error())
	}

	db = NewImageMonkeyDatabase()
	err = db.Initialize()
	if err != nil {
		log.Fatal("[Main] Couldn't initialize database: ", err.Error())
		panic(err)
	}

	err = db.Open()
	if err != nil {
		log.Fatal("[Main] Couldn't open database: ", err.Error())
	}


	//create redis pool
	redisPool := redis.NewPool(func() (redis.Conn, error) {
		c, err := redis.Dial("tcp", REDIS_ADDRESS)

		if err != nil {
			log.Fatal("[Main] Couldn't dial redis: ", err.Error())
		}

		return c, err
	}, 1)
	defer redisPool.Close()

	log.Info("Notify api/web service to reconnect to database (to avoid flaky testcases)")
	redisConn := redisPool.Get()
	_, err = redisConn.Do("PUBLISH", "tasks", "reconnectdb")
	if err != nil {
		log.Fatal("Couldn't publish message: ", err.Error())
	}
	defer redisConn.Close()
}
