// Code generated from ..\grammar\ImagemonkeyQueryLang.g4 by ANTLR 4.7.1. DO NOT EDIT.

package imagemonkeyquerylang

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 18, 202,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 5, 13, 119, 10, 13, 3, 14, 6, 14, 122, 10, 14, 13,
	14, 14, 14, 123, 3, 14, 3, 14, 6, 14, 128, 10, 14, 13, 14, 14, 14, 129,
	5, 14, 132, 10, 14, 3, 14, 7, 14, 135, 10, 14, 12, 14, 14, 14, 138, 11,
	14, 3, 14, 3, 14, 7, 14, 142, 10, 14, 12, 14, 14, 14, 145, 11, 14, 3, 14,
	3, 14, 6, 14, 149, 10, 14, 13, 14, 14, 14, 150, 3, 14, 3, 14, 3, 15, 3,
	15, 3, 15, 3, 15, 7, 15, 159, 10, 15, 12, 15, 14, 15, 162, 11, 15, 3, 15,
	3, 15, 5, 15, 166, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 6, 17, 182, 10, 17,
	13, 17, 14, 17, 183, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3,
	21, 3, 22, 3, 22, 3, 23, 6, 23, 197, 10, 23, 13, 23, 14, 23, 198, 3, 23,
	3, 23, 2, 2, 24, 3, 2, 5, 2, 7, 2, 9, 2, 11, 2, 13, 2, 15, 3, 17, 4, 19,
	5, 21, 6, 23, 7, 25, 8, 27, 9, 29, 10, 31, 11, 33, 12, 35, 13, 37, 14,
	39, 15, 41, 16, 43, 17, 45, 18, 3, 2, 10, 3, 2, 99, 124, 3, 2, 67, 92,
	4, 2, 67, 92, 99, 124, 5, 2, 34, 34, 67, 92, 99, 124, 5, 2, 50, 59, 67,
	92, 99, 124, 4, 2, 62, 62, 64, 64, 3, 2, 50, 59, 5, 2, 11, 12, 15, 15,
	34, 34, 2, 209, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2,
	2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2,
	2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3,
	2, 2, 2, 2, 45, 3, 2, 2, 2, 3, 47, 3, 2, 2, 2, 5, 49, 3, 2, 2, 2, 7, 51,
	3, 2, 2, 2, 9, 53, 3, 2, 2, 2, 11, 55, 3, 2, 2, 2, 13, 60, 3, 2, 2, 2,
	15, 62, 3, 2, 2, 2, 17, 82, 3, 2, 2, 2, 19, 94, 3, 2, 2, 2, 21, 107, 3,
	2, 2, 2, 23, 109, 3, 2, 2, 2, 25, 118, 3, 2, 2, 2, 27, 121, 3, 2, 2, 2,
	29, 165, 3, 2, 2, 2, 31, 167, 3, 2, 2, 2, 33, 181, 3, 2, 2, 2, 35, 185,
	3, 2, 2, 2, 37, 187, 3, 2, 2, 2, 39, 189, 3, 2, 2, 2, 41, 191, 3, 2, 2,
	2, 43, 193, 3, 2, 2, 2, 45, 196, 3, 2, 2, 2, 47, 48, 9, 2, 2, 2, 48, 4,
	3, 2, 2, 2, 49, 50, 9, 3, 2, 2, 50, 6, 3, 2, 2, 2, 51, 52, 9, 4, 2, 2,
	52, 8, 3, 2, 2, 2, 53, 54, 9, 5, 2, 2, 54, 10, 3, 2, 2, 2, 55, 56, 9, 6,
	2, 2, 56, 57, 9, 6, 2, 2, 57, 58, 9, 6, 2, 2, 58, 59, 9, 6, 2, 2, 59, 12,
	3, 2, 2, 2, 60, 61, 7, 34, 2, 2, 61, 14, 3, 2, 2, 2, 62, 63, 7, 99, 2,
	2, 63, 64, 7, 112, 2, 2, 64, 65, 7, 112, 2, 2, 65, 66, 7, 113, 2, 2, 66,
	67, 7, 118, 2, 2, 67, 68, 7, 99, 2, 2, 68, 69, 7, 118, 2, 2, 69, 70, 7,
	107, 2, 2, 70, 71, 7, 113, 2, 2, 71, 72, 7, 112, 2, 2, 72, 73, 7, 48, 2,
	2, 73, 74, 7, 101, 2, 2, 74, 75, 7, 113, 2, 2, 75, 76, 7, 120, 2, 2, 76,
	77, 7, 103, 2, 2, 77, 78, 7, 116, 2, 2, 78, 79, 7, 99, 2, 2, 79, 80, 7,
	105, 2, 2, 80, 81, 7, 103, 2, 2, 81, 16, 3, 2, 2, 2, 82, 83, 7, 107, 2,
	2, 83, 84, 7, 111, 2, 2, 84, 85, 7, 99, 2, 2, 85, 86, 7, 105, 2, 2, 86,
	87, 7, 103, 2, 2, 87, 88, 7, 48, 2, 2, 88, 89, 7, 121, 2, 2, 89, 90, 7,
	107, 2, 2, 90, 91, 7, 102, 2, 2, 91, 92, 7, 118, 2, 2, 92, 93, 7, 106,
	2, 2, 93, 18, 3, 2, 2, 2, 94, 95, 7, 107, 2, 2, 95, 96, 7, 111, 2, 2, 96,
	97, 7, 99, 2, 2, 97, 98, 7, 105, 2, 2, 98, 99, 7, 103, 2, 2, 99, 100, 7,
	48, 2, 2, 100, 101, 7, 106, 2, 2, 101, 102, 7, 103, 2, 2, 102, 103, 7,
	107, 2, 2, 103, 104, 7, 105, 2, 2, 104, 105, 7, 106, 2, 2, 105, 106, 7,
	118, 2, 2, 106, 20, 3, 2, 2, 2, 107, 108, 7, 39, 2, 2, 108, 22, 3, 2, 2,
	2, 109, 110, 7, 114, 2, 2, 110, 111, 7, 122, 2, 2, 111, 24, 3, 2, 2, 2,
	112, 119, 9, 7, 2, 2, 113, 114, 7, 64, 2, 2, 114, 119, 7, 63, 2, 2, 115,
	119, 7, 63, 2, 2, 116, 117, 7, 62, 2, 2, 117, 119, 7, 63, 2, 2, 118, 112,
	3, 2, 2, 2, 118, 113, 3, 2, 2, 2, 118, 115, 3, 2, 2, 2, 118, 116, 3, 2,
	2, 2, 119, 26, 3, 2, 2, 2, 120, 122, 5, 7, 4, 2, 121, 120, 3, 2, 2, 2,
	122, 123, 3, 2, 2, 2, 123, 121, 3, 2, 2, 2, 123, 124, 3, 2, 2, 2, 124,
	131, 3, 2, 2, 2, 125, 127, 7, 48, 2, 2, 126, 128, 5, 7, 4, 2, 127, 126,
	3, 2, 2, 2, 128, 129, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 129, 130, 3, 2,
	2, 2, 130, 132, 3, 2, 2, 2, 131, 125, 3, 2, 2, 2, 131, 132, 3, 2, 2, 2,
	132, 136, 3, 2, 2, 2, 133, 135, 5, 13, 7, 2, 134, 133, 3, 2, 2, 2, 135,
	138, 3, 2, 2, 2, 136, 134, 3, 2, 2, 2, 136, 137, 3, 2, 2, 2, 137, 139,
	3, 2, 2, 2, 138, 136, 3, 2, 2, 2, 139, 143, 7, 63, 2, 2, 140, 142, 5, 13,
	7, 2, 141, 140, 3, 2, 2, 2, 142, 145, 3, 2, 2, 2, 143, 141, 3, 2, 2, 2,
	143, 144, 3, 2, 2, 2, 144, 146, 3, 2, 2, 2, 145, 143, 3, 2, 2, 2, 146,
	148, 7, 41, 2, 2, 147, 149, 5, 9, 5, 2, 148, 147, 3, 2, 2, 2, 149, 150,
	3, 2, 2, 2, 150, 148, 3, 2, 2, 2, 150, 151, 3, 2, 2, 2, 151, 152, 3, 2,
	2, 2, 152, 153, 7, 41, 2, 2, 153, 28, 3, 2, 2, 2, 154, 166, 5, 7, 4, 2,
	155, 160, 5, 7, 4, 2, 156, 159, 5, 13, 7, 2, 157, 159, 5, 7, 4, 2, 158,
	156, 3, 2, 2, 2, 158, 157, 3, 2, 2, 2, 159, 162, 3, 2, 2, 2, 160, 158,
	3, 2, 2, 2, 160, 161, 3, 2, 2, 2, 161, 163, 3, 2, 2, 2, 162, 160, 3, 2,
	2, 2, 163, 164, 5, 7, 4, 2, 164, 166, 3, 2, 2, 2, 165, 154, 3, 2, 2, 2,
	165, 155, 3, 2, 2, 2, 166, 30, 3, 2, 2, 2, 167, 168, 5, 11, 6, 2, 168,
	169, 5, 11, 6, 2, 169, 170, 7, 47, 2, 2, 170, 171, 5, 11, 6, 2, 171, 172,
	7, 47, 2, 2, 172, 173, 5, 11, 6, 2, 173, 174, 7, 47, 2, 2, 174, 175, 5,
	11, 6, 2, 175, 176, 7, 47, 2, 2, 176, 177, 5, 11, 6, 2, 177, 178, 5, 11,
	6, 2, 178, 179, 5, 11, 6, 2, 179, 32, 3, 2, 2, 2, 180, 182, 9, 8, 2, 2,
	181, 180, 3, 2, 2, 2, 182, 183, 3, 2, 2, 2, 183, 181, 3, 2, 2, 2, 183,
	184, 3, 2, 2, 2, 184, 34, 3, 2, 2, 2, 185, 186, 7, 40, 2, 2, 186, 36, 3,
	2, 2, 2, 187, 188, 7, 126, 2, 2, 188, 38, 3, 2, 2, 2, 189, 190, 7, 128,
	2, 2, 190, 40, 3, 2, 2, 2, 191, 192, 7, 42, 2, 2, 192, 42, 3, 2, 2, 2,
	193, 194, 7, 43, 2, 2, 194, 44, 3, 2, 2, 2, 195, 197, 9, 9, 2, 2, 196,
	195, 3, 2, 2, 2, 197, 198, 3, 2, 2, 2, 198, 196, 3, 2, 2, 2, 198, 199,
	3, 2, 2, 2, 199, 200, 3, 2, 2, 2, 200, 201, 8, 23, 2, 2, 201, 46, 3, 2,
	2, 2, 15, 2, 118, 123, 129, 131, 136, 143, 150, 158, 160, 165, 183, 198,
	3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'annotation.coverage'", "'image.width'", "'image.height'", "'%'",
	"'px'", "", "", "", "", "", "'&'", "'|'", "'~'", "'('", "')'",
}

var lexerSymbolicNames = []string{
	"", "ANNOTATION_COVERAGE_PREFIX", "IMAGE_WIDTH_PREFIX", "IMAGE_HEIGHT_PREFIX",
	"PERCENT", "PIXEL", "OPERATOR", "ASSIGNMENT", "LABEL", "UUID", "VAL", "AND",
	"OR", "NOT", "LPAR", "RPAR", "SKIPPED_TOKENS",
}

var lexerRuleNames = []string{
	"LOWERCASE", "UPPERCASE", "UPPERLOWERCASE", "UPPERLOWERCASEWS", "UUIDBLOCK",
	"WS", "ANNOTATION_COVERAGE_PREFIX", "IMAGE_WIDTH_PREFIX", "IMAGE_HEIGHT_PREFIX",
	"PERCENT", "PIXEL", "OPERATOR", "ASSIGNMENT", "LABEL", "UUID", "VAL", "AND",
	"OR", "NOT", "LPAR", "RPAR", "SKIPPED_TOKENS",
}

type ImagemonkeyQueryLangLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewImagemonkeyQueryLangLexer(input antlr.CharStream) *ImagemonkeyQueryLangLexer {

	l := new(ImagemonkeyQueryLangLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "ImagemonkeyQueryLang.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ImagemonkeyQueryLangLexer tokens.
const (
	ImagemonkeyQueryLangLexerANNOTATION_COVERAGE_PREFIX = 1
	ImagemonkeyQueryLangLexerIMAGE_WIDTH_PREFIX         = 2
	ImagemonkeyQueryLangLexerIMAGE_HEIGHT_PREFIX        = 3
	ImagemonkeyQueryLangLexerPERCENT                    = 4
	ImagemonkeyQueryLangLexerPIXEL                      = 5
	ImagemonkeyQueryLangLexerOPERATOR                   = 6
	ImagemonkeyQueryLangLexerASSIGNMENT                 = 7
	ImagemonkeyQueryLangLexerLABEL                      = 8
	ImagemonkeyQueryLangLexerUUID                       = 9
	ImagemonkeyQueryLangLexerVAL                        = 10
	ImagemonkeyQueryLangLexerAND                        = 11
	ImagemonkeyQueryLangLexerOR                         = 12
	ImagemonkeyQueryLangLexerNOT                        = 13
	ImagemonkeyQueryLangLexerLPAR                       = 14
	ImagemonkeyQueryLangLexerRPAR                       = 15
	ImagemonkeyQueryLangLexerSKIPPED_TOKENS             = 16
)
